package com.petsay.database.greendao.chat;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.petsay.database.greendao.DaoSession;

import com.petsay.vo.chat.ChatContacts;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHAT_CONTACTS.
*/
public class ChatContactsDao extends AbstractDao<ChatContacts, String> {

    public static final String TABLENAME = "CHAT_CONTACTS";

    /**
     * Properties of entity ChatContacts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PetId = new Property(0, String.class, "petId", true, "PET_ID");
        public final static Property HeadPortrait = new Property(1, String.class, "headPortrait", false, "HEAD_PORTRAIT");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
    };

    private DaoSession daoSession;


    public ChatContactsDao(DaoConfig config) {
        super(config);
    }
    
    public ChatContactsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_CONTACTS' (" + //
                "'PET_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: petId
                "'HEAD_PORTRAIT' TEXT," + // 1: headPortrait
                "'NICK_NAME' TEXT);"); // 2: nickName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_CONTACTS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatContacts entity) {
        stmt.clearBindings();
 
        String petId = entity.getPetId();
        if (petId != null) {
            stmt.bindString(1, petId);
        }
 
        String headPortrait = entity.getHeadPortrait();
        if (headPortrait != null) {
            stmt.bindString(2, headPortrait);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
    }

    @Override
    protected void attachEntity(ChatContacts entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatContacts readEntity(Cursor cursor, int offset) {
        ChatContacts entity = new ChatContacts( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // petId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // headPortrait
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // nickName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatContacts entity, int offset) {
        entity.setPetId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setHeadPortrait(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ChatContacts entity, long rowId) {
        return entity.getPetId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ChatContacts entity) {
        if(entity != null) {
            return entity.getPetId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
