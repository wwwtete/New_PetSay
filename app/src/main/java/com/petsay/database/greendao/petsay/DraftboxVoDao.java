package com.petsay.database.greendao.petsay;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.petsay.database.greendao.DaoSession;

import com.petsay.vo.petalk.DraftboxVo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DRAFTBOX_VO.
*/
public class DraftboxVoDao extends AbstractDao<DraftboxVo, Long> {

    public static final String TABLENAME = "DRAFTBOX_VO";

    /**
     * Properties of entity DraftboxVo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Model = new Property(1, Integer.class, "model", false, "MODEL");
        public final static Property PetId = new Property(2, String.class, "petId", false, "PET_ID");
        public final static Property PhotoPath = new Property(3, String.class, "photoPath", false, "PHOTO_PATH");
        public final static Property AudioPath = new Property(4, String.class, "audioPath", false, "AUDIO_PATH");
        public final static Property ThumbPath = new Property(5, String.class, "thumbPath", false, "THUMB_PATH");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property AudioSecond = new Property(7, Integer.class, "audioSecond", false, "AUDIO_SECOND");
        public final static Property CreateTime = new Property(8, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property Tag = new Property(9, String.class, "tag", false, "TAG");
    };

    private DaoSession daoSession;


    public DraftboxVoDao(DaoConfig config) {
        super(config);
    }
    
    public DraftboxVoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DRAFTBOX_VO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MODEL' INTEGER," + // 1: model
                "'PET_ID' TEXT," + // 2: petId
                "'PHOTO_PATH' TEXT," + // 3: photoPath
                "'AUDIO_PATH' TEXT," + // 4: audioPath
                "'THUMB_PATH' TEXT," + // 5: thumbPath
                "'DESCRIPTION' TEXT," + // 6: description
                "'AUDIO_SECOND' INTEGER," + // 7: audioSecond
                "'CREATE_TIME' INTEGER," + // 8: createTime
                "'TAG' TEXT);"); // 9: tag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DRAFTBOX_VO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DraftboxVo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer model = entity.getModel();
        if (model != null) {
            stmt.bindLong(2, model);
        }
 
        String petId = entity.getPetId();
        if (petId != null) {
            stmt.bindString(3, petId);
        }
 
        String photoPath = entity.getPhotoPath();
        if (photoPath != null) {
            stmt.bindString(4, photoPath);
        }
 
        String audioPath = entity.getAudioPath();
        if (audioPath != null) {
            stmt.bindString(5, audioPath);
        }
 
        String thumbPath = entity.getThumbPath();
        if (thumbPath != null) {
            stmt.bindString(6, thumbPath);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        Integer audioSecond = entity.getAudioSecond();
        if (audioSecond != null) {
            stmt.bindLong(8, audioSecond);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(9, createTime.getTime());
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(10, tag);
        }
    }

    @Override
    protected void attachEntity(DraftboxVo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DraftboxVo readEntity(Cursor cursor, int offset) {
        DraftboxVo entity = new DraftboxVo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // model
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // petId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // photoPath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // audioPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // thumbPath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // audioSecond
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // createTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // tag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DraftboxVo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setModel(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPetId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhotoPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAudioPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThumbPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAudioSecond(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCreateTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setTag(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DraftboxVo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DraftboxVo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
