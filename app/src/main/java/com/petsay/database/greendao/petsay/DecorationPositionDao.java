package com.petsay.database.greendao.petsay;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.petsay.database.greendao.DaoSession;

import com.petsay.vo.petalk.DraftboxVo;

import com.petsay.vo.petalk.DecorationPosition;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DECORATION_POSITION.
*/
public class DecorationPositionDao extends AbstractDao<DecorationPosition, Long> {

    public static final String TABLENAME = "DECORATION_POSITION";

    /**
     * Properties of entity DecorationPosition.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DecorationId = new Property(1, String.class, "decorationId", false, "DECORATION_ID");
        public final static Property Width = new Property(2, Double.class, "width", false, "WIDTH");
        public final static Property Height = new Property(3, Double.class, "height", false, "HEIGHT");
        public final static Property CenterX = new Property(4, Double.class, "centerX", false, "CENTER_X");
        public final static Property CenterY = new Property(5, Double.class, "centerY", false, "CENTER_Y");
        public final static Property RotationX = new Property(6, Double.class, "rotationX", false, "ROTATION_X");
        public final static Property RotationY = new Property(7, Double.class, "rotationY", false, "ROTATION_Y");
        public final static Property RotationZ = new Property(8, Double.class, "rotationZ", false, "ROTATION_Z");
    };

    private DaoSession daoSession;

    private Query<DecorationPosition> draftboxVo_DecorationsQuery;

    public DecorationPositionDao(DaoConfig config) {
        super(config);
    }
    
    public DecorationPositionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DECORATION_POSITION' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DECORATION_ID' TEXT," + // 1: decorationId
                "'WIDTH' REAL," + // 2: width
                "'HEIGHT' REAL," + // 3: height
                "'CENTER_X' REAL," + // 4: centerX
                "'CENTER_Y' REAL," + // 5: centerY
                "'ROTATION_X' REAL," + // 6: rotationX
                "'ROTATION_Y' REAL," + // 7: rotationY
                "'ROTATION_Z' REAL);"); // 8: rotationZ
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DECORATION_POSITION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DecorationPosition entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String decorationId = entity.getDecorationId();
        if (decorationId != null) {
            stmt.bindString(2, decorationId);
        }
 
        Double width = entity.getWidth();
        if (width != null) {
            stmt.bindDouble(3, width);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(4, height);
        }
 
        Double centerX = entity.getCenterX();
        if (centerX != null) {
            stmt.bindDouble(5, centerX);
        }
 
        Double centerY = entity.getCenterY();
        if (centerY != null) {
            stmt.bindDouble(6, centerY);
        }
 
        Double rotationX = entity.getRotationX();
        if (rotationX != null) {
            stmt.bindDouble(7, rotationX);
        }
 
        Double rotationY = entity.getRotationY();
        if (rotationY != null) {
            stmt.bindDouble(8, rotationY);
        }
 
        Double rotationZ = entity.getRotationZ();
        if (rotationZ != null) {
            stmt.bindDouble(9, rotationZ);
        }
    }

    @Override
    protected void attachEntity(DecorationPosition entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DecorationPosition readEntity(Cursor cursor, int offset) {
        DecorationPosition entity = new DecorationPosition( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // decorationId
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // width
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // height
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // centerX
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // centerY
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // rotationX
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // rotationY
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8) // rotationZ
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DecorationPosition entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDecorationId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWidth(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setHeight(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCenterX(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setCenterY(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setRotationX(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setRotationY(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setRotationZ(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DecorationPosition entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DecorationPosition entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "decorations" to-many relationship of DraftboxVo. */
    public List<DecorationPosition> _queryDraftboxVo_Decorations(Long id) {
        synchronized (this) {
            if (draftboxVo_DecorationsQuery == null) {
                QueryBuilder<DecorationPosition> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                draftboxVo_DecorationsQuery = queryBuilder.build();
            }
        }
        Query<DecorationPosition> query = draftboxVo_DecorationsQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDraftboxVoDao().getAllColumns());
            builder.append(" FROM DECORATION_POSITION T");
            builder.append(" LEFT JOIN DRAFTBOX_VO T0 ON T.'_id'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DecorationPosition loadCurrentDeep(Cursor cursor, boolean lock) {
        DecorationPosition entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DraftboxVo draftboxVo = loadCurrentOther(daoSession.getDraftboxVoDao(), cursor, offset);
        entity.setDraftboxVo(draftboxVo);

        return entity;    
    }

    public DecorationPosition loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but fileCount was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DecorationPosition> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DecorationPosition> list = new ArrayList<DecorationPosition>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DecorationPosition> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DecorationPosition> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
