package com.petsay.database.greendao.chat;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.petsay.database.greendao.DaoSession;

import com.petsay.vo.chat.ChatContacts;
import com.petsay.vo.chat.ChatMsgEntity;

import com.petsay.vo.chat.NewestMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NEWEST_MSG.
*/
public class NewestMsgDao extends AbstractDao<NewestMsg, String> {

    public static final String TABLENAME = "NEWEST_MSG";

    /**
     * Properties of entity NewestMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PetId = new Property(0, String.class, "petId", true, "PET_ID");
        public final static Property ChatMsgEntityId = new Property(1, long.class, "chatMsgEntityId", false, "CHAT_MSG_ENTITY_ID");
        public final static Property MsgCount = new Property(2, Integer.class, "msgCount", false, "MSG_COUNT");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
    };

    private DaoSession daoSession;


    public NewestMsgDao(DaoConfig config) {
        super(config);
    }
    
    public NewestMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NEWEST_MSG' (" + //
                "'PET_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: petId
                "'CHAT_MSG_ENTITY_ID' INTEGER NOT NULL ," + // 1: chatMsgEntityId
                "'MSG_COUNT' INTEGER," + // 2: msgCount
                "'DATE' INTEGER NOT NULL );"); // 3: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NEWEST_MSG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewestMsg entity) {
        stmt.clearBindings();
 
        String petId = entity.getPetId();
        if (petId != null) {
            stmt.bindString(1, petId);
        }
        stmt.bindLong(2, entity.getChatMsgEntityId());
 
        Integer msgCount = entity.getMsgCount();
        if (msgCount != null) {
            stmt.bindLong(3, msgCount);
        }
        stmt.bindLong(4, entity.getDate().getTime());
    }

    @Override
    protected void attachEntity(NewestMsg entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NewestMsg readEntity(Cursor cursor, int offset) {
        NewestMsg entity = new NewestMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // petId
            cursor.getLong(offset + 1), // chatMsgEntityId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // msgCount
            new java.util.Date(cursor.getLong(offset + 3)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewestMsg entity, int offset) {
        entity.setPetId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChatMsgEntityId(cursor.getLong(offset + 1));
        entity.setMsgCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(NewestMsg entity, long rowId) {
        return entity.getPetId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(NewestMsg entity) {
        if(entity != null) {
            return entity.getPetId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getChatContactsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getChatMsgEntityDao().getAllColumns());
            builder.append(" FROM NEWEST_MSG T");
            builder.append(" LEFT JOIN CHAT_CONTACTS T0 ON T.'PET_ID'=T0.'PET_ID'");
            builder.append(" LEFT JOIN CHAT_MSG_ENTITY T1 ON T.'CHAT_MSG_ENTITY_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected NewestMsg loadCurrentDeep(Cursor cursor, boolean lock) {
        NewestMsg entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ChatContacts chatContacts = loadCurrentOther(daoSession.getChatContactsDao(), cursor, offset);
        entity.setChatContacts(chatContacts);
        offset += daoSession.getChatContactsDao().getAllColumns().length;

        ChatMsgEntity chatMsgEntity = loadCurrentOther(daoSession.getChatMsgEntityDao(), cursor, offset);
         if(chatMsgEntity != null) {
            entity.setChatMsgEntity(chatMsgEntity);
        }

        return entity;    
    }

    public NewestMsg loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but fileCount was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<NewestMsg> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<NewestMsg> list = new ArrayList<NewestMsg>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<NewestMsg> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<NewestMsg> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
