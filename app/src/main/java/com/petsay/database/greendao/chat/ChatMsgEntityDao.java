package com.petsay.database.greendao.chat;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.petsay.database.greendao.DaoSession;

import com.petsay.vo.chat.ChatContacts;

import com.petsay.vo.chat.ChatMsgEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHAT_MSG_ENTITY.
*/
public class ChatMsgEntityDao extends AbstractDao<ChatMsgEntity, Long> {

    public static final String TABLENAME = "CHAT_MSG_ENTITY";

    /**
     * Properties of entity ChatMsgEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property Text = new Property(2, String.class, "text", false, "TEXT");
        public final static Property MediaTime = new Property(3, Integer.class, "mediaTime", false, "MEDIA_TIME");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property IsComMeg = new Property(5, Boolean.class, "isComMeg", false, "IS_COM_MEG");
        public final static Property AccFromId = new Property(6, String.class, "accFromId", false, "ACC_FROM_ID");
        public final static Property AccToId = new Property(7, String.class, "accToId", false, "ACC_TO_ID");
        public final static Property States = new Property(8, Integer.class, "states", false, "STATES");
        public final static Property PetId = new Property(9, String.class, "petId", false, "PET_ID");
    };

    private DaoSession daoSession;

    private Query<ChatMsgEntity> chatContacts_ChatMsgEntityListQuery;

    public ChatMsgEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMsgEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_MSG_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DATE' INTEGER," + // 1: date
                "'TEXT' TEXT," + // 2: text
                "'MEDIA_TIME' INTEGER," + // 3: mediaTime
                "'TYPE' TEXT," + // 4: type
                "'IS_COM_MEG' INTEGER," + // 5: isComMeg
                "'ACC_FROM_ID' TEXT," + // 6: accFromId
                "'ACC_TO_ID' TEXT," + // 7: accToId
                "'STATES' INTEGER," + // 8: states
                "'PET_ID' TEXT NOT NULL );"); // 9: petId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_MSG_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatMsgEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
 
        Integer mediaTime = entity.getMediaTime();
        if (mediaTime != null) {
            stmt.bindLong(4, mediaTime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        Boolean isComMeg = entity.getIsComMeg();
        if (isComMeg != null) {
            stmt.bindLong(6, isComMeg ? 1l: 0l);
        }
 
        String accFromId = entity.getAccFromId();
        if (accFromId != null) {
            stmt.bindString(7, accFromId);
        }
 
        String accToId = entity.getAccToId();
        if (accToId != null) {
            stmt.bindString(8, accToId);
        }
 
        Integer states = entity.getStates();
        if (states != null) {
            stmt.bindLong(9, states);
        }
        stmt.bindString(10, entity.getPetId());
    }

    @Override
    protected void attachEntity(ChatMsgEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatMsgEntity readEntity(Cursor cursor, int offset) {
        ChatMsgEntity entity = new ChatMsgEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // text
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // mediaTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isComMeg
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // accFromId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // accToId
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // states
            cursor.getString(offset + 9) // petId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatMsgEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMediaTime(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsComMeg(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setAccFromId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAccToId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStates(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setPetId(cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatMsgEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatMsgEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "chatMsgEntityList" to-many relationship of ChatContacts. */
    public List<ChatMsgEntity> _queryChatContacts_ChatMsgEntityList(String petId) {
        synchronized (this) {
            if (chatContacts_ChatMsgEntityListQuery == null) {
                QueryBuilder<ChatMsgEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PetId.eq(null));
                chatContacts_ChatMsgEntityListQuery = queryBuilder.build();
            }
        }
        Query<ChatMsgEntity> query = chatContacts_ChatMsgEntityListQuery.forCurrentThread();
        query.setParameter(0, petId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getChatContactsDao().getAllColumns());
            builder.append(" FROM CHAT_MSG_ENTITY T");
            builder.append(" LEFT JOIN CHAT_CONTACTS T0 ON T.'PET_ID'=T0.'PET_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ChatMsgEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        ChatMsgEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ChatContacts chatContacts = loadCurrentOther(daoSession.getChatContactsDao(), cursor, offset);
         if(chatContacts != null) {
            entity.setChatContacts(chatContacts);
        }

        return entity;    
    }

    public ChatMsgEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but fileCount was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ChatMsgEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ChatMsgEntity> list = new ArrayList<ChatMsgEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ChatMsgEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ChatMsgEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
