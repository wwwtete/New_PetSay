package com.petsay.vo.petalk;

import com.petsay.database.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.petsay.database.greendao.petsay.DecorationPositionDao;
import com.petsay.database.greendao.petsay.DraftboxVoDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DECORATION_POSITION.
 */
public class DecorationPosition {

    private Long id;
    private String decorationId;
    private Double width;
    private Double height;
    private Double centerX;
    private Double centerY;
    private Double rotationX;
    private Double rotationY;
    private Double rotationZ;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DecorationPositionDao myDao;

    private DraftboxVo draftboxVo;
    private Long draftboxVo__resolvedKey;


    public DecorationPosition() {
    }

    public DecorationPosition(Long id) {
        this.id = id;
    }

    public DecorationPosition(Long id, String decorationId, Double width, Double height, Double centerX, Double centerY, Double rotationX, Double rotationY, Double rotationZ) {
        this.id = id;
        this.decorationId = decorationId;
        this.width = width;
        this.height = height;
        this.centerX = centerX;
        this.centerY = centerY;
        this.rotationX = rotationX;
        this.rotationY = rotationY;
        this.rotationZ = rotationZ;
    }

    public static DecorationPosition parsePublishTalkPosition(DraftboxVo vo,PublishTalkParam.Position position){
        DecorationPosition dp = new DecorationPosition();
        dp.setCenterX(position.centerX);
        dp.setCenterY(position.centerY);
        dp.setDecorationId(position.decorationId);
        dp.setDraftboxVo(vo);
        dp.setHeight(position.height);
        dp.setRotationX(position.rotationX);
        dp.setRotationY(position.rotationY);
        dp.setRotationZ(position.rotationZ);
        dp.setWidth(position.width);
        return  dp;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDecorationPositionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDecorationId() {
        return decorationId;
    }

    public void setDecorationId(String decorationId) {
        this.decorationId = decorationId;
    }

    public Double getWidth() {
        return width;
    }

    public void setWidth(Double width) {
        this.width = width;
    }

    public Double getHeight() {
        return height;
    }

    public void setHeight(Double height) {
        this.height = height;
    }

    public Double getCenterX() {
        return centerX;
    }

    public void setCenterX(Double centerX) {
        this.centerX = centerX;
    }

    public Double getCenterY() {
        return centerY;
    }

    public void setCenterY(Double centerY) {
        this.centerY = centerY;
    }

    public Double getRotationX() {
        return rotationX;
    }

    public void setRotationX(Double rotationX) {
        this.rotationX = rotationX;
    }

    public Double getRotationY() {
        return rotationY;
    }

    public void setRotationY(Double rotationY) {
        this.rotationY = rotationY;
    }

    public Double getRotationZ() {
        return rotationZ;
    }

    public void setRotationZ(Double rotationZ) {
        this.rotationZ = rotationZ;
    }

    /** To-one relationship, resolved on first access. */
    public DraftboxVo getDraftboxVo() {
        Long __key = this.id;
        if (draftboxVo__resolvedKey == null || !draftboxVo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DraftboxVoDao targetDao = daoSession.getDraftboxVoDao();
            DraftboxVo draftboxVoNew = targetDao.load(__key);
            synchronized (this) {
                draftboxVo = draftboxVoNew;
            	draftboxVo__resolvedKey = __key;
            }
        }
        return draftboxVo;
    }

    public void setDraftboxVo(DraftboxVo draftboxVo) {
        synchronized (this) {
            this.draftboxVo = draftboxVo;
            id = draftboxVo == null ? null : draftboxVo.getId();
            draftboxVo__resolvedKey = id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
