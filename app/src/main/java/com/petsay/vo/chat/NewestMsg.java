package com.petsay.vo.chat;

import com.petsay.database.greendao.DaoSession;
import com.petsay.database.greendao.chat.ChatContactsDao;
import com.petsay.database.greendao.chat.ChatMsgEntityDao;
import com.petsay.database.greendao.chat.NewestMsgDao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table NEWEST_MSG.
 */
public class NewestMsg {

    private String petId;
    private long chatMsgEntityId;
    private Integer msgCount;
    /** Not-null value. */
    private java.util.Date date;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NewestMsgDao myDao;

    private ChatContacts chatContacts;
    private String chatContacts__resolvedKey;

    private ChatMsgEntity chatMsgEntity;
    private Long chatMsgEntity__resolvedKey;


    public NewestMsg() {
    }

    public NewestMsg(String petId) {
        this.petId = petId;
    }

    public NewestMsg(String petId, long chatMsgEntityId, Integer msgCount, java.util.Date date) {
        this.petId = petId;
        this.chatMsgEntityId = chatMsgEntityId;
        this.msgCount = msgCount;
        this.date = date;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNewestMsgDao() : null;
    }

    public String getPetId() {
        return petId;
    }

    public void setPetId(String petId) {
        this.petId = petId;
    }

    public long getChatMsgEntityId() {
        return chatMsgEntityId;
    }

    public void setChatMsgEntityId(long chatMsgEntityId) {
        this.chatMsgEntityId = chatMsgEntityId;
    }

    public Integer getMsgCount() {
        return msgCount;
    }

    public void setMsgCount(Integer msgCount) {
        this.msgCount = msgCount;
    }

    /** Not-null value. */
    public java.util.Date getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(java.util.Date date) {
        this.date = date;
    }

    /** To-one relationship, resolved on first access. */
    public ChatContacts getChatContacts() {
        String __key = this.petId;
        if (chatContacts__resolvedKey == null || chatContacts__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChatContactsDao targetDao = daoSession.getChatContactsDao();
            ChatContacts chatContactsNew = targetDao.load(__key);
            synchronized (this) {
                chatContacts = chatContactsNew;
            	chatContacts__resolvedKey = __key;
            }
        }
        return chatContacts;
    }

    public void setChatContacts(ChatContacts chatContacts) {
        synchronized (this) {
            this.chatContacts = chatContacts;
            petId = chatContacts == null ? null : chatContacts.getPetId();
            chatContacts__resolvedKey = petId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ChatMsgEntity getChatMsgEntity() {
        long __key = this.chatMsgEntityId;
        if (chatMsgEntity__resolvedKey == null || !chatMsgEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChatMsgEntityDao targetDao = daoSession.getChatMsgEntityDao();
            ChatMsgEntity chatMsgEntityNew = targetDao.load(__key);
            synchronized (this) {
                chatMsgEntity = chatMsgEntityNew;
            	chatMsgEntity__resolvedKey = __key;
            }
        }
        return chatMsgEntity;
    }

    public void setChatMsgEntity(ChatMsgEntity chatMsgEntity) {
        if (chatMsgEntity == null) {
            throw new DaoException("To-one property 'chatMsgEntityId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.chatMsgEntity = chatMsgEntity;
            chatMsgEntityId = chatMsgEntity.getId();
            chatMsgEntity__resolvedKey = chatMsgEntityId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
